name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Change this to your main branch if different

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker
        run: |
          # Install Docker
          curl -fsSL https://get.docker.com -o get-docker.sh
          sh get-docker.sh

          # Install Docker Compose
          DOCKER_COMPOSE_VERSION=1.29.2  # Specify the desired version
          sudo curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build Docker Images
        run: |
          docker-compose -f docker-compose.yaml build

      - name: Save Docker Images as Tar Files
        run: |
          # Save each service image to a tar file
          docker save auth-service -o auth-service.tar
          docker save ticket-service -o ticket-service.tar
          docker save notification-service -o notification-service.tar
          docker save frontend-next -o frontend-next.tar
          docker save rabbitmq -o rabbitmq.tar

      - name: Copy SSH Key
        run: echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" > id_rsa && chmod 600 id_rsa

      - name: Transfer Images to VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          scp -i id_rsa -o StrictHostKeyChecking=no auth-service.tar $VPS_USER@$VPS_HOST:/tmp/
          scp -i id_rsa -o StrictHostKeyChecking=no ticket-service.tar $VPS_USER@$VPS_HOST:/tmp/
          scp -i id_rsa -o StrictHostKeyChecking=no notification-service.tar $VPS_USER@$VPS_HOST:/tmp/
          scp -i id_rsa -o StrictHostKeyChecking=no frontend-next.tar $VPS_USER@$VPS_HOST:/tmp/
          scp -i id_rsa -o StrictHostKeyChecking=no rabbitmq.tar $VPS_USER@$VPS_HOST:/tmp/

  deploy:
    runs-on: ubuntu-latest
    needs: build  # This job will only run after the build job completes successfully

    steps:
      - name: Copy SSH Key
        run: echo  > id_rsa && chmod 600 id_rsa

      - name: Deploy to VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          ssh -i id_rsa -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'EOF'
            # Load images from tar files
            docker load -i /tmp/auth-service.tar
            docker load -i /tmp/ticket-service.tar
            docker load -i /tmp/notification-service.tar
            docker load -i /tmp/frontend-next.tar
            docker load -i /tmp/rabbitmq.tar

            # Clean up tar files
            rm /tmp/*.tar

            # Start or restart the services
            cd /path/to/your/project
            docker-compose up -d
          EOF
