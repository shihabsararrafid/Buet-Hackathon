# .github/workflows/deploy.yml
name: Deploy to VPS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Build images first
      - name: Build Docker images
        run: docker-compose build

      # List images to verify they were built
      - name: List Docker images
        run: docker images

      # Save images with correct names
      - name: Save Docker images
        run: |
          mkdir -p images
          # Save using the full repository names
          docker save \
            buet-hackathon-auth-service:latest \
            buet-hackathon-ticket-service:latest \
            buet-hackathon-notification-service:latest \
            buet-hackathon-frontend-next:latest \
            rabbitmq:3-management | gzip > images/services.tar.gz

      - name: Install sshpass
        run: sudo apt-get install sshpass

      - name: Copy files to VPS
        run: |
          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

          sshpass -p '${{ secrets.VPS_PASSWORD }}' scp -o StrictHostKeyChecking=no \
            docker-compose.yml \
            images/services.tar.gz \
            .env \
            deploy.sh \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/app/

      - name: Deploy to VPS
        run: |
          sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
            cd ~/app
            # Load the images
            gunzip -c images/services.tar.gz | docker load
            
            # Create .env file
            cat << EOF > .env
            SMTP_USER=${{ secrets.SMTP_USER }}
            SMTP_PASS=${{ secrets.SMTP_PASS }}
            EOF
            
            # Make deploy script executable
            chmod +x deploy.sh
            
            # Run deploy script
            ./deploy.sh
          '
